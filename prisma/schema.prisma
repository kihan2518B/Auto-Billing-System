// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Organization {
//   id              String    @id @default(uuid())
//   name            String
//   gstNumber       String
//   logo            String?
//   address         String
//   accountNumber   String
//   ifscCode        String
//   bankName        String
//   rulesAndPolicies String?
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt
//   users           User[]
//   customers       Customer[]
//   invoices        Invoice[]
// }

// model User {
//   id             String    @id @default(uuid())
//   email          String    @unique
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id])
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
// }

// model Customer {
//   id             String    @id @default(uuid())
//   name           String
//   address        String
//   gstNumber      String
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id])
//   invoices       Invoice[]
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
// }

// model Invoice {
//   id             String    @id @default(uuid())
//   invoiceNumber  String
//   customerId     String
//   customer       Customer  @relation(fields: [customerId], references: [id])
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id])
//   totalAmount    Float
//   gstAmount      Float
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
//   items          InvoiceItem[]
//   payments       Payment[]
// }

// model InvoiceItem {
//   id         String  @id @default(uuid())
//   invoiceId  String
//   invoice    Invoice @relation(fields: [invoiceId], references: [id])
//   productName String
//   hsnCode    String
//   quantity   Float
//   price      Float
//   unit       String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// model Payment {
//   id         String  @id @default(uuid())
//   invoiceId  String
//   invoice    Invoice @relation(fields: [invoiceId], references: [id])
//   amount     Float
//   paymentDate DateTime
//   paymentMethod String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Organization Organization[]
  customers    Customer[]
  invoices     Invoice[]
}

model Organization {
  id            String    @id @default(uuid())
  name          String
  gstNumber     String    @unique
  logo          String?
  address       String
  bankName      String
  accountNumber String
  ifscCode      String
  policy        String?
  userId        String
  invoiceCount  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  invoices      Invoice[]
  user          User      @relation(fields: [userId], references: [id])
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  address   String
  gstNumber String
  invoices  Invoice[]
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Invoice {
  id             String       @id @default(uuid())
  invoiceNumber  String
  organizationId String
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  customerId     String?
  customer       Customer?    @relation(fields: [customerId], references: [id])
  billerName     String?
  invoiceType    String //Credit or Debit
  items          Json
  totalAmount    Float
  vehicalNumber  String
  gstAmount      Float
  grandTotal     Float
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  User           User         @relation(fields: [userId], references: [id])
  payments       PaymentLog[]
}

model PaymentLog {
  id            String   @id @default(uuid())
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  amount        String
  note          String?
  paymentDate   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creditBillsId String?
}
